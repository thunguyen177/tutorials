import statsmodels.api as sm
import itertools
import pandas as pd
from sklearn.datasets import fetch_california_housing

# Load the California Housing dataset
california = fetch_california_housing()
X = pd.DataFrame(california.data, columns=california.feature_names)
y = pd.Series(california.target, name='MedHouseVal')

# Add a constant to the model (intercept)
X = sm.add_constant(X)

# Function to fit model and get BIC
def fit_model(features):
    model = sm.OLS(y, X[list(features)]).fit()  # Use list(features) to handle tuples
    return model.bic

# Generate all possible combinations of features
features = X.columns.tolist()
features.remove('const')  # Remove the constant term from the list of features
results = []

for k in range(1, len(features) + 1):
    for combo in itertools.combinations(features, k):
        combo = ('const',) + combo  # Add constant term to the feature set
        bic = fit_model(combo)
        results.append((combo, bic))

# Convert results to DataFrame and sort the models based on BIC
results_df = pd.DataFrame(results, columns=['Features', 'BIC'])
sorted_df = results_df.sort_values(by='BIC')

# Display the best model based on BIC
print("Best model based on BIC:")
sorted_df = results_df.sort_values(by='BIC')

# the set of features that build up the best model according to BIC:
best_features = sorted_df.iloc[0, 0]

# Fit the model using the best features
model = sm.OLS(y, X[list(best_features)]).fit()

# Display the summary of the model
print(model.summary())